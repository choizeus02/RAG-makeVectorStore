# -*- coding: utf-8 -*-
"""컴퓨터견적추천.ipynb의 사본

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZdcQbDKmDO2nQ9KQxkCicVL9XegnY56O

# 랭체인으로 컴퓨터 견적 추천 만들기

# LangChain 라이브러리 설치
"""

"""# 컴퓨터 견적 GPT 만들기

# 상품 리뷰 데이터 다운로드 & 업로드하기
"""

"""# 컴퓨터 견적 데이터 읽어오기"""

from langchain_community.document_loaders import DirectoryLoader
from langchain_community.document_loaders import JSONLoader
from langchain_openai import ChatOpenAI
import json
import pandas as pd

loader = DirectoryLoader('최종데이터', glob="**/*.json", loader_cls=JSONLoader,
                         loader_kwargs={'jq_schema': '.', 'text_content': False})
docs = loader.load()

print(len(docs))

"""# 한글 인코딩 처리"""


def escape_quotes_in_raw_text(json_str):
    # "RawText" 키의 시작 인덱스 찾기
    start_index = json_str.find('"quote_description": "') + len('"quote_description": "')
    # 시작 인덱스로부터 "RawText" 값의 종료 인덱스 찾기
    end_index = json_str.find('", "', start_index)
    # "RawText" 값 내의 모든 쌍따옴표를 이스케이프 처리된 형태로 변경
    raw_text_value = json_str[start_index:end_index].replace('"', '\\"')
    # 변경된 "RawText" 값을 원본 문자열에 다시 삽입
    fixed_json_string = json_str[:start_index] + raw_text_value + json_str[end_index:]

    return fixed_json_string


def escape_quotes_in_sentiment_text(json_str):
    # "SentimentText": "를 찾는 것으로 시작
    search_str = '"quote_feedback": "'
    start_index = 0

    while True:
        # "SentimentText": " 의 시작 위치를 찾기
        start_index = json_str.find(search_str, start_index)
        if start_index == -1:  # 더 이상 찾을 수 없으면 반복 종료
            break

        # 시작 위치 조정 (키의 길이를 더해 실제 값의 시작점으로 이동)
        start_index += len(search_str)
        # 해당 값의 종료 위치 찾기 (다음 큰따옴표 위치)
        end_index = json_str.find('", "', start_index)
        if end_index == -1:  # 예외 처리: 형식에 맞지 않는 경우
            break

        # SentimentText 값 내의 모든 큰따옴표 이스케이프 처리
        sentiment_text = json_str[start_index:end_index].replace('"', '\\"')
        # 변경된 값을 원본 문자열에 다시 삽입
        json_str = json_str[:start_index] + sentiment_text + json_str[end_index:]

        # 다음 SentimentText 검색을 위해 start_index 업데이트
        start_index = end_index + len('", "')

    return json_str


refined_docs = []
for doc in docs:
    python_dict = json.loads(doc.page_content)

    refined_docs.append(python_dict)

# 결과를 확인
# for pd in refined_docs:
#     print(pd)

# refined_docs
#
print(type(refined_docs[0]))


def clean_control_characters(json_str):
    # JSON에서 유효하지 않은 제어 문자 제거
    json_str = json_str.replace('\n', '\\n').replace('\r', '\\r').replace('\t', '\\t')
    # 추가적으로 JSON에서 문제를 일으킬 수 있는 다른 제어 문자도 이스케이프할 수 있습니다.
    return json_str


refined_docs = []
for doc in docs:
    try:
        # 유니코드 이스케이프 시퀀스 처리 후 제어 문자 정리
        fixed_korean = doc.page_content.encode('utf-8').decode('unicode-escape')
        cleaned_json_string = clean_control_characters(fixed_korean)
        refined_doc = json.loads(cleaned_json_string)
        refined_docs.append(refined_doc)
    except Exception as e:
        print("Error processing document:", e)

# 결과 확인
# for doc in refined_docs:
#     print(doc)


refined_docs = []
for doc in docs:
    python_dict = json.loads(doc.page_content)

    refined_docs.append(python_dict)

# 결과를 확인
# for pd in refined_docs:
#     print(pd)
#
"""# Pandas Dataframe 형태로 정제하고 데이터 분석하기"""
#
# print(refined_docs[0])
#
# print(+len(refined_docs))

#

data_df = pd.DataFrame(refined_docs)


# print(data_df)
#
def convert_price_to_int(price):
    if isinstance(price, str):
        # Remove '원' and commas, then convert to integer
        return int(price.replace('원', '').replace(',', ''))
    return price  # Return as is if it's already an integer


# Apply the function to the 'total_price' column
data_df['total_price'] = data_df['total_price'].apply(convert_price_to_int)

# Check the output to confirm the changes
# print(data_df[['quote_title', 'total_price']])

data_df = data_df.dropna(subset=['cpu_score'])
data_df['cpu_score'] = data_df['cpu_score'].astype(int)
unique_values_list = list(data_df['cpu_score'].unique())
# print(unique_values_list)
#
data_df = data_df.dropna(subset=['gpu_score'])
data_df['gpu_score'] = data_df['gpu_score'].astype(int)

data_df = data_df.dropna(subset=['gpu_benchmarkscore'])
data_df['gpu_benchmarkscore'] = data_df['gpu_benchmarkscore'].astype(int)

data_df = data_df.dropna(subset=['cpu_benchmarkscore'])
data_df['cpu_benchmarkscore'] = data_df['cpu_benchmarkscore'].astype(int)
#
unique_values_list = list(data_df['total_price'].unique())
# print(unique_values_list)
# print(len(unique_values_list))
#
unique_values_list = list(data_df['date_create'].unique())
# print(unique_values_list)
# print(len(unique_values_list))
#
# unique_values_list = list(data_df['date_create'].unique())
# for idx, name in enumerate(unique_values_list):
#     print(idx, name)
print("data_df.columns")
print(data_df.columns)

data_df = data_df[['quote_title', 'date_create', 'cpu_gpu_combinations',
                   'quotation_summary', 'quote_person_introduction', 'quote_feedback',
                   'computer_estimate_data', 'quote_description', 'parts_price',
                   'total_price', 'CPU', 'Motherboard', 'Graphic Card', 'SSD', 'Memory',
                   'Power Supply', 'CPU Cooler', 'cpu_score', 'gpu_score',
                   'performance_grade','cpu_benchmarkscore','gpu_benchmarkscore']]

print(data_df)
# # data_df를 CSV 파일로 저장
# data_df.to_csv('data_df.csv', index=False, encoding='utf-8-sig')
#
# # CSV 파일로부터 데이터프레임 불러오기
# loaded_data_df = pd.read_csv('data_df.csv', encoding='utf-8-sig')


#
"""# GPT를 이용한 Attribute Info 추출"""
#
OPENAI_KEY = ""

print("loaded_data_df.head")
print(data_df.head())
#
#
res = [
    {
        "name": "quote_title",
        "description": "Title of the quote for the computer",
        "type": "string"
    },
    {
        "name": "date_create",
        "description": "Date the quote was created",
        "type": "date"
    },
    {
        "name": "cpu_gpu_combinations",
        "description": "Combination of CPU and GPU used in the computer",
        "type": "string"
    },
    {
        "name": "quotation_summary",
        "description": "Summary of the quotation",
        "type": "string"
    },
    {
        "name": "quote_person_introduction",
        "description": "Introduction of the person giving the quote",
        "type": "string"
    },
    {
        "name": "quote_feedback",
        "description": "Feedback given on the quote",
        "type": "string"
    },
    {
        "name": "computer_estimate_data",
        "description": "Data on the estimate of the computer",
        "type": "string"
    },
    {
        "name": "quote_description",
        "description": "Description of the quote",
        "type": "string"
    },
    {
        "name": "parts_price",
        "description": "Price of the parts of the computer",
        "type": "object"
    },
    {
        "name": "total_price",
        "description": "Total price of the computer",
        "type": "integer"
    },
    {
        "name": "CPU",
        "description": "CPU used in the computer",
        "type": "string"
    },
    {
        "name": "Motherboard",
        "description": "Motherboard used in the computer",
        "type": "string"
    },
    {
        "name": "Graphic Card",
        "description": "Graphic card used in the computer",
        "type": "string"
    },
    {
        "name": "SSD",
        "description": "SSD used in the computer",
        "type": "string"
    },
    {
        "name": "Memory",
        "description": "Memory used in the computer",
        "type": "string"
    },
    {
        "name": "Power Supply",
        "description": "Power supply used in the computer",
        "type": "string"
    },
    {
        "name": "CPU Cooler",
        "description": "CPU cooler used in the computer",
        "type": "string"
    },
    {
        "name": "cpu_score",
        "description": "Score of the CPU used in the computer",
        "type": "integer"
    },
    {
        "name": "gpu_score",
        "description": "Score of the GPU used in the computer",
        "type": "integer"
    },
    {
        "name": "performance_grade",
        "description": "Performance grade of the computer",
        "type": "string"
    }
]

# print("res")
# print(res)


attribute_info = [
    {"name": "quote_title", "description": "Title of the quote for the computer", "type": "string"},
    {"name": "date_create", "description": "Date the quote was created", "type": "date"},
    {"name": "cpu_gpu_combinations", "description": "Combination of CPU and GPU used in the computer",
     "type": "string"},
    {"name": "quotation_summary", "description": "Summary of the quotation", "type": "string"},
    {"name": "quote_person_introduction", "description": "Introduction of the person giving the quote",
     "type": "string"},
    {"name": "quote_feedback", "description": "Feedback given on the quote", "type": "string"},
    {"name": "computer_estimate_data", "description": "Data on the estimate of the computer", "type": "string"},
    {"name": "quote_description", "description": "Description of the quote", "type": "string"},
    {"name": "parts_price", "description": "Price of the parts of the computer", "type": "object"},
    {"name": "total_price", "description": "Total price of the computer", "type": "integer"},
    {"name": "CPU", "description": "CPU used in the computer", "type": "string"},
    {"name": "Motherboard", "description": "Motherboard used in the computer", "type": "string"},
    {"name": "Graphic Card", "description": "Graphic card used in the computer", "type": "string"},
    {"name": "SSD", "description": "SSD used in the computer", "type": "string"},
    {"name": "Memory", "description": "Memory used in the computer", "type": "string"},
    {"name": "Power Supply", "description": "Power supply used in the computer", "type": "string"},
    {"name": "CPU Cooler", "description": "CPU cooler used in the computer", "type": "string"},
    {'name': 'cpu_score',
     'description': 'Performance score of the CPU. Valid values are [0, 1, 11, 13, 14, 23, 24, 56, 60, 63, 67, 98, 107, 111, 136, 181, 194, 209, 225, 247, 257, 312, 332, 335, 355, 359, 361, 366, 399, 504, 595, 844]',
     'type': 'integer'},
    {'name': 'gpu_score',
     'description': 'Performance score of the GPU. Valid values are [0, 1, 4, 6, 11, 14, 25, 28, 31, 32, 37, 43, 47, 53, 67, 72, 80, 81, 88, 106, 132, 152, 153, 170, 183, 184, 196, 207]',
     'type': 'integer'},
    {'name': 'performance_grade',
     'description': "Overall performance grade of the computer. Valid values are ['고성능', '저성능', '중성능']",
     'type': 'string'},
    {
        'name': 'cpu_benchmarkscore',
        'description': 'Overall benchmark score of the CPU based on performance tests. This score is typically a higher number indicating better performance. Valid values are integers.',
        'type': 'integer'
    },
    {
        'name': 'gpu_benchmarkscore',
        'description': 'Overall benchmark score of the GPU based on performance tests. This score is typically a higher number indicating better performance. Valid values are integers.',
        'type': 'integer'
    }
]
print("attribute_info\n")
print(attribute_info)

# 모든 행을 검토하여 리스트 또는 사전 데이터 타입을 포함하는 열을 제외
safe_columns = [col for col in data_df.columns if not any(isinstance(x, (list, dict)) for x in data_df[col])]

# safe_columns를 사용하여 고유 값의 수를 계산
unique_counts_safe = data_df[safe_columns].nunique()

# 결과 출력
# print(unique_counts_safe)

attribute_info[-3][
    "description"
] += f". Valid values are {sorted(data_df['cpu_score'].value_counts().index.tolist())}"
attribute_info[-2][
    "description"
] += f". Valid values are {sorted(data_df['gpu_score'].value_counts().index.tolist())}"
attribute_info[-1][
    "description"
] += f". Valid values are {sorted(data_df['performance_grade'].value_counts().index.tolist())}"

# print(attribute_info)
#
# # attribute_info[18]
#
"""# Creating a query constructor chain
#
# """
#
from langchain.chains.query_constructor.base import (
    get_query_constructor_prompt,
    load_query_constructor_runnable,
)

#
doc_contents = "견적에 대한 자세한 설명"
prompt = get_query_constructor_prompt(doc_contents, attribute_info)
# print(prompt.format(query="{query}"))

# chain = load_query_constructor_runnable(
#     ChatOpenAI(model="gpt-3.5-turbo", temperature=0, openai_api_key=OPENAI_KEY), doc_contents, attribute_info
# )
#
# print(chain.invoke({"query": "170만원 견적 추천을 해줘"}))
#
# print(chain.invoke({"query": "고성능 견적 추천해줘"}))
#
# print(chain.invoke({"query": "게이밍 컴퓨터 견적 추천해줘"}))

"""# Adding examples specific to our use case

**'조용한 무선 키보드를 추천해줘'라는 요청 query가 영어로 변경된 모습**을 볼 수 있습니다.
따라서 **query 마지막에 ProductName: {키워드}를 추가한 few-shot 예시를 통해 query가 영어로 변하지 않고, ProductName을 제대로 매칭하도록 강제**합니다. 사용 사례별 예제를 추가하는 것이 도움이 될지 봅시다:
"""

cpu_rank = {
    'AMD Ryzen Threadripper PRO 7995WX': 0,
    'AMD Ryzen Threadripper 7980X': 1,
    'AMD Ryzen Threadripper 7970X': 11,
    'AMD Ryzen Threadripper PRO 7975WX': 13,
    'AMD Ryzen Threadripper PRO 5995WX': 14,
    'AMD Ryzen Threadripper PRO 7965WX': 23,
    'AMD Ryzen Threadripper 7960X': 24,
    'Intel Core i9-14900KS': 56,
    'AMD Ryzen 9 7950X': 60,
    'AMD Ryzen 9 7950X3D': 63,
    'Intel Core i9-13900KS': 67,
    'Intel Core i7-14700K': 98,
    'AMD Ryzen 9 7900X': 107,
    'AMD Ryzen 9 7900X3D': 111,
    'Intel Core i7-13700K': 136,
    'Intel Core i5-14600KF': 181,
    'Intel Core i5-13600K': 194,
    'AMD Ryzen 7 7700X': 209,
    'AMD Ryzen 7 7800X3D': 225,
    'Intel Core i5-14500': 247,
    'Intel Core i5-13500': 257,
    'AMD Ryzen 5 7600X': 312,
    'Intel Core i5-12600K': 332,
    'Apple M3 Pro 12 Core': 335,
    'AMD Ryzen 5 7500F': 355,
    'AMD Ryzen 7 5700X': 359,
    'Intel Core i5-14400': 361,
    'AMD Ryzen 7 5700X3D': 366,
    'Intel Core i5-13400F': 399,
    'AMD Ryzen 5 5600X': 504,
    'Intel Core i5-12400F': 595,
    'Intel Core i3-12100E': 844
}

gpu_rank = {
    'GeForce RTX 4090': 0,
    'GeForce RTX 4080': 1,
    'GeForce RTX 4070 Ti': 4,
    'Radeon RX 7900 XTX': 6,
    'Radeon PRO W7800': 11,
    'RTX 6000 Ada Generation': 14,
    'Radeon RX 6800 XT': 25,
    'GeForce RTX 3070 Ti': 28,
    'GeForce RTX 4060 Ti 16GB': 31,
    'GeForce RTX 4060 Ti': 32,
    'NVIDIA A10': 37,
    'RTX A5500': 43,
    'GeForce RTX 3060 Ti': 47,
    'Radeon RX 6700 XT': 53,
    'Radeon RX 6750 GRE 12GB': 67,
    'Radeon PRO W7600': 72,
    'Radeon RX 6650 XT': 80,
    'GeForce RTX 3060 12GB': 81,
    'Radeon RX 6600 XT': 88,
    'GeForce RTX 3060 8GB': 106,
    'RTX A2000 12GB': 132,
    'GeForce GTX 1660 Ti': 152,
    'GeForce RTX 3050 8GB': 153,
    'GeForce RTX 3050 OEM': 170,
    'L4': 183,
    'Intel Arc A580': 184,
    'GeForce RTX 3050 6GB': 196,
    'GeForce GTX 1650 SUPER': 207
}

extended_examples = [
    # 가격대별 게이밍 PC
    (
        "200만원 이하의 게이밍 PC를 추천해줘.",
        {
            "query": "200만원 이하 게이밍 PC 견적",
            "filter": "and(gte('total_price', 1800000), lte('total_price', 2000000))"
        }
    ),
    (
        "100만원대의 사무용 컴퓨터 견적을 보여줘.",
        {
            "query": "사무용",
            "filter": "and(gte('total_price', 900000), lte('total_price', 1100000)"
        }
    ),
    (
        "300만원 이내의 고성능 그래픽 작업용 PC를 추천해줘.",
        {
            "query": "300만원이내, 그래픽 작업용",
            "filter": "and(gte('total_price', 2800000), lte('total_price', 3000000),eq('performance_grade','고성능'))"
        }
    ),
    # 특별한 조건
    (
        "예산 150만원으로 로스트아크를 풀옵션으로 돌릴 수 있는 PC를 추천해줘.",
        {
            "query": "로스트아크 ,로아 ,풀옵션 ",
            "filter": "and(gte('total_price', 1400000), lte('total_price', 1500000))"
        }
    ),
    (
        "3D 모델링 및 렌더링을 위한 PC 견적을 추천해줘",
        {
            "query": "3D 모델링 , 렌더링 ",
            "filter": None
        }
    ),
    (
        "롤과 배그가 돌아가는 PC 견적을 추천해줘",
        {
            "query": "롤,배그,게이밍",
            "filter": None
        }
    ),
    (
        "예산 100만원으로 사무용 PC를 추천해줘.",
        {
            "query": "사무용",
            "filter": "and(gte('total_price', 900000), lte('total_price', 1000000))"
        }
    ),
    (
        "예산 200만원 이하로 고성능 게이밍 PC를 추천해줘.",
        {
            "query": "게이밍",
            "filter": "and(lte('total_price', 2000000)),eq('performance_grade','고성능')"
        }
    ),
    (
        "예산 80만원으로 기본적인 인터넷 서핑과 문서 작업이 가능한 PC를 추천해줘.",
        {
            "query": "인터넷 서핑, 문서 작업",
            "filter": "and(gte('total_price', 700000), lte('total_price', 800000))"
        }
    ),
    (
        "예산 200만원으로 대학생이 사용하기 좋은 PC를 추천해줘.",
        {
            "query": "대학생",
            "filter": "and(gte('total_price', 1800000), lte('total_price', 2000000))"
        }
    ),
    (
        "예산 150만원으로 가성비 좋은 게이밍 PC를 추천해줘.",
        {
            "query": "가성비",
            "filter": "and(gte('total_price', 1400000), lte('total_price', 1500000))"
        }
    ),
    (
        "영상 편집과 게임을 동시에 할 수 있는 PC를 추천해줘.",
        {
            "query": "영상 편집, 게임",
            "filter": None
        }
    ),
    (
        "예산 120만원으로 집에서 영화 감상과 간단한 게임을 할 수 있는 PC를 추천해줘.",
        {
            "query": "영화 감상, 간단한 게임",
            "filter": "and(gte('total_price', 1100000), lte('total_price', 1200000))"
        }
    ),
    (
        "예산 300만원으로 프로그래밍과 디자인 작업을 동시에 할 수 있는 PC를 추천해줘.",
        {
            "query": "프로그래밍, 디자인 작업",
            "filter": "and(gte('total_price', 2800000), lte('total_price', 3000000))"
        }
    ),
    (
        "가격 200만원이상 롤,오버워치를 할수있으며 영상편집을 취미수준으로 할수있고 하드디스크 500GB이상인 pc를 추천해줘",
        {
            "query": "롤,오버워치,게이밍,영상편집,취미,하드디스크,HD,500GB이상",
            "filter": "and(gte('total_price', 2000000))"
        }
    ),
    (
        "그래픽카드 3060이상이고 cpu는 i7-11세대 이상이 들어갔으면 좋겠어 조건을 충족하는 pc 피씨를 추천해줘",
        {
            "query": "그래픽카드 3060, i7-11세대 이상",
            "filter": f"and(lte('gpu_score', {gpu_rank['GeForce RTX 3060 12GB']}), lte('cpu_score', {cpu_rank['Intel Core i7-13700K']}))"
        }
    ),
    # GPU 이하 조건 3개
    (
        "그래픽카드 3060 이하이고 cpu는 i5-12세대 이하가 들어갔으면 좋겠어 조건을 충족하는 pc 피씨를 추천해줘",
        {
            "query": "그래픽카드 3060, i5-12세대 이하",
            "filter": f"and(gte('gpu_score', {gpu_rank['GeForce RTX 3060 12GB']}), gte('cpu_score', {cpu_rank['Intel Core i5-12600K']}))"
        }
    ),
    # CPU 이상 조건 3개
    (
        "그래픽카드 3060 이상이고 cpu는 i7-12세대 이상이 들어갔으면 좋겠어 조건을 충족하는 pc 피씨를 추천해줘",
        {
            "query": "그래픽카드 3060, i7-12세대 이상",
            "filter": f"and(lte('gpu_score', {gpu_rank['GeForce RTX 3060 12GB']}), lte('cpu_score', {cpu_rank['Intel Core i7-13700K']}))"
        }
    ),
    # 하나는 이상이고 하나는 이하 조건 3개
    (
        "그래픽카드 3060 이상이고 cpu는 i5-12세대 이하가 들어갔으면 좋겠어 조건을 충족하는 pc 피씨를 추천해줘",
        {
            "query": "그래픽카드 3060, i5-12세대 이하",
            "filter": f"and(lte('gpu_score', {gpu_rank['GeForce RTX 3060 12GB']}), gte('cpu_score', {cpu_rank['Intel Core i5-12600K']}))"
        }
    ),
    (
        "그래픽카드 4080 이상이고 cpu는 i7-12세대 이하가 들어갔으면 좋겠어 조건을 충족하는 pc 피씨를 추천해줘",
        {
            "query": "그래픽카드 4080, i7-12세대 이하",
            "filter": f"and(lte('gpu_score', {gpu_rank['GeForce RTX 4080']}), gte('cpu_score', {cpu_rank['Intel Core i7-13700K']}))"
        }
    ),
    # GPU 이상 조건
    (
        "그래픽카드 3060 이상이고 cpu는 i7-11세대 이상이 들어갔으면 좋겠어 조건을 충족하는 pc 피씨를 추천해줘",
        {
            "query": "그래픽카드 3060, i7-11세대 이상",
            "filter": f"and(lte('gpu_score', {gpu_rank['GeForce RTX 3060 12GB']}), lte('cpu_score', {cpu_rank['Intel Core i7-13700K']}))"
        }
    ),
    # GPU 이하 조건 3개

    (
        "그래픽카드 3050 이하이고 cpu는 i5-12세대 이하가 들어갔으면 좋겠어 조건을 충족하는 pc 피씨를 추천해줘",
        {
            "query": "그래픽카드 3050, i5-12세대 이하",
            "filter": f"and(gte('gpu_score', {gpu_rank['GeForce RTX 3050 8GB']}), gte('cpu_score', {cpu_rank['Intel Core i5-12600K']}))"
        }
    ),

    # 두가지부품을 넣을때
    (
        "Intel Core i9-13900KS와 RTX 6000 Ada Generation이 들어간 PC를 추천해줘",
        {
            "query": "Intel Core i9-13900KS, RTX 6000 Ada Generation",
            "filter": f"and(eq('cpu_score', {cpu_rank['Intel Core i9-13900KS']}), eq('gpu_score', {gpu_rank['RTX 6000 Ada Generation']}))"
        }
    ),
    (
        "Intel Core i5-14600KF와 GeForce RTX 4060 Ti 16GB가 들어간 PC를 추천해줘",
        {
            "query": "Intel Core i5-14600KF, GeForce RTX 4060 Ti 16GB",
            "filter": f"and(eq('cpu_score', {cpu_rank['Intel Core i5-14600KF']}), eq('gpu_score', {gpu_rank['GeForce RTX 4060 Ti 16GB']}))"
        }
    ),
    # 컴퓨터 부품모든예외처리
    # 그래픽 처리
    (
        "GeForce RTX 4090을 포함하는 PC를 추천해줘",
        {
            "query": "GeForce RTX 4090 포함",
            "filter": f"eq('gpu_score', {gpu_rank['GeForce RTX 4090']})"
        }
    ),
    (
        "GeForce RTX 4080을 포함하는 PC를 추천해줘",
        {
            "query": "GeForce RTX 4080 포함",
            "filter": f"eq('gpu_score', {gpu_rank['GeForce RTX 4080']})"
        }
    ),
    (
        "GeForce RTX 4070 Ti를 포함하는 PC를 추천해줘",
        {
            "query": "GeForce RTX 4070 Ti 포함",
            "filter": f"eq('gpu_score', {gpu_rank['GeForce RTX 4070 Ti']})"
        }
    ),
    (
        "Radeon RX 7900 XTX를 포함하는 PC를 추천해줘",
        {
            "query": "Radeon RX 7900 XTX 포함",
            "filter": f"eq('gpu_score', {gpu_rank['Radeon RX 7900 XTX']})"
        }
    ),
    (
        "RTX 6000 Ada Generation을 포함하는 PC를 추천해줘",
        {
            "query": "RTX 6000 Ada Generation 포함",
            "filter": f"eq('gpu_score', {gpu_rank['RTX 6000 Ada Generation']})"
        }
    ),
    (
        "Radeon RX 6800 XT를 포함하는 PC를 추천해줘",
        {
            "query": "Radeon RX 6800 XT 포함",
            "filter": f"eq('gpu_score', {gpu_rank['Radeon RX 6800 XT']})"
        }
    ),
    (
        "GeForce RTX 3070 Ti를 포함하는 PC를 추천해줘",
        {
            "query": "GeForce RTX 3070 Ti 포함",
            "filter": f"eq('gpu_score', {gpu_rank['GeForce RTX 3070 Ti']})"
        }
    ),
    (
        "GeForce RTX 4060 Ti 16GB를 포함하는 PC를 추천해줘",
        {
            "query": "GeForce RTX 4060 Ti 16GB 포함",
            "filter": f"eq('gpu_score', {gpu_rank['GeForce RTX 4060 Ti 16GB']})"
        }
    ),
    (
        "GeForce RTX 4060 Ti를 포함하는 PC를 추천해줘",
        {
            "query": "GeForce RTX 4060 Ti 포함",
            "filter": f"eq('gpu_score', {gpu_rank['GeForce RTX 4060 Ti']})"
        }
    ),
    (
        "RTX A5500을 포함하는 PC를 추천해줘",
        {
            "query": "RTX A5500 포함",
            "filter": f"eq('gpu_score', {gpu_rank['RTX A5500']})"
        }
    ),
    (
        "GeForce RTX 3060 Ti를 포함하는 PC를 추천해줘",
        {
            "query": "GeForce RTX 3060 Ti 포함",
            "filter": f"eq('gpu_score', {gpu_rank['GeForce RTX 3060 Ti']})"
        }
    ),
    (
        "Radeon RX 6700 XT를 포함하는 PC를 추천해줘",
        {
            "query": "Radeon RX 6700 XT 포함",
            "filter": f"eq('gpu_score', {gpu_rank['Radeon RX 6700 XT']})"
        }
    ),
    (
        "Radeon RX 6750 GRE 12GB를 포함하는 PC를 추천해줘",
        {
            "query": "Radeon RX 6750 GRE 12GB 포함",
            "filter": f"eq('gpu_score', {gpu_rank['Radeon RX 6750 GRE 12GB']})"
        }
    ),
    (
        "Radeon PRO W7600을 포함하는 PC를 추천해줘",
        {
            "query": "Radeon PRO W7600 포함",
            "filter": f"eq('gpu_score', {gpu_rank['Radeon PRO W7600']})"
        }
    ),
    (
        "Radeon RX 6650 XT를 포함하는 PC를 추천해줘",
        {
            "query": "Radeon RX 6650 XT 포함",
            "filter": f"eq('gpu_score', {gpu_rank['Radeon RX 6650 XT']})"
        }
    ),
    (
        "GeForce RTX 3060 12GB를 포함하는 PC를 추천해줘",
        {
            "query": "GeForce RTX 3060 12GB 포함",
            "filter": f"eq('gpu_score', {gpu_rank['GeForce RTX 3060 12GB']})"
        }
    ),
    (
        "Radeon RX 6600 XT를 포함하는 PC를 추천해줘",
        {
            "query": "Radeon RX 6600 XT 포함",
            "filter": f"eq('gpu_score', {gpu_rank['Radeon RX 6600 XT']})"
        }
    ),
    (
        "GeForce RTX 3060 8GB를 포함하는 PC를 추천해줘",
        {
            "query": "GeForce RTX 3060 8GB 포함",
            "filter": f"eq('gpu_score', {gpu_rank['GeForce RTX 3060 8GB']})"
        }
    ),
    (
        "RTX A2000 12GB를 포함하는 PC를 추천해줘",
        {
            "query": "RTX A2000 12GB 포함",
            "filter": f"eq('gpu_score', {gpu_rank['RTX A2000 12GB']})"
        }
    ),
    (
        "GeForce GTX 1660 Ti를 포함하는 PC를 추천해줘",
        {
            "query": "GeForce GTX 1660 Ti 포함",
            "filter": f"eq('gpu_score', {gpu_rank['GeForce GTX 1660 Ti']})"
        }
    ),
    (
        "GeForce RTX 3050 8GB를 포함하는 PC를 추천해줘",
        {
            "query": "GeForce RTX 3050 8GB 포함",
            "filter": f"eq('gpu_score', {gpu_rank['GeForce RTX 3050 8GB']})"
        }
    ),
    (
        "GeForce RTX 3050 6GB를 포함하는 PC를 추천해줘",
        {
            "query": "GeForce RTX 3050 6GB 포함",
            "filter": f"eq('gpu_score', {gpu_rank['GeForce RTX 3050 6GB']})"
        }
    ),
    (
        "GeForce GTX 1650 SUPER를 포함하는 PC를 추천해줘",
        {
            "query": "GeForce GTX 1650 SUPER 포함",
            "filter": f"eq('gpu_score', {gpu_rank['GeForce GTX 1650 SUPER']})"
        }
    )
    # cpu
    , (
        "AMD Ryzen Threadripper PRO 7995WX를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen Threadripper PRO 7995WX 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen Threadripper PRO 7995WX']})"
        }
    ),
    (
        "AMD Ryzen Threadripper 7980X를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen Threadripper 7980X 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen Threadripper 7980X']})"
        }
    ),
    (
        "AMD Ryzen Threadripper 7970X를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen Threadripper 7970X 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen Threadripper 7970X']})"
        }
    ),
    (
        "AMD Ryzen Threadripper PRO 7975WX를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen Threadripper PRO 7975WX 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen Threadripper PRO 7975WX']})"
        }
    ),
    (
        "AMD Ryzen Threadripper PRO 5995WX를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen Threadripper PRO 5995WX 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen Threadripper PRO 5995WX']})"
        }
    ),
    (
        "AMD Ryzen Threadripper 7960X를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen Threadripper 7960X 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen Threadripper 7960X']})"
        }
    ),
    (
        "Intel Core i9-14900KS를 포함하는 PC를 추천해줘",
        {
            "query": "Intel Core i9-14900KS 포함",
            "filter": f"eq('cpu_score', {cpu_rank['Intel Core i9-14900KS']})"
        }
    ),
    (
        "AMD Ryzen 9 7950X를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen 9 7950X 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen 9 7950X']})"
        }
    ),
    (
        "Intel Core i9-13900KS를 포함하는 PC를 추천해줘",
        {
            "query": "Intel Core i9-13900KS 포함",
            "filter": f"eq('cpu_score', {cpu_rank['Intel Core i9-13900KS']})"
        }
    ),
    (
        "Intel Core i7-14700K를 포함하는 PC를 추천해줘",
        {
            "query": "Intel Core i7-14700K 포함",
            "filter": f"eq('cpu_score', {cpu_rank['Intel Core i7-14700K']})"
        }
    ),
    (
        "AMD Ryzen 9 7900X를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen 9 7900X 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen 9 7900X']})"
        }
    ),
    (
        "AMD Ryzen 9 7900X3D를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen 9 7900X3D 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen 9 7900X3D']})"
        }
    ),
    (
        "Intel Core i7-13700K를 포함하는 PC를 추천해줘",
        {
            "query": "Intel Core i7-13700K 포함",
            "filter": f"eq('cpu_score', {cpu_rank['Intel Core i7-13700K']})"
        }
    ),
    (
        "Intel Core i5-14600KF를 포함하는 PC를 추천해줘",
        {
            "query": "Intel Core i5-14600KF 포함",
            "filter": f"eq('cpu_score', {cpu_rank['Intel Core i5-14600KF']})"
        }
    ),
    (
        "Intel Core i5-13600K를 포함하는 PC를 추천해줘",
        {
            "query": "Intel Core i5-13600K 포함",
            "filter": f"eq('cpu_score', {cpu_rank['Intel Core i5-13600K']})"
        }
    ),
    (
        "AMD Ryzen 7 7700X를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen 7 7700X 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen 7 7700X']})"
        }
    ),
    (
        "AMD Ryzen 7 7800X3D를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen 7 7800X3D 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen 7 7800X3D']})"
        }
    ),
    (
        "Intel Core i5-14500를 포함하는 PC를 추천해줘",
        {
            "query": "Intel Core i5-14500 포함",
            "filter": f"eq('cpu_score', {cpu_rank['Intel Core i5-14500']})"
        }
    ),
    (
        "Intel Core i5-13500를 포함하는 PC를 추천해줘",
        {
            "query": "Intel Core i5-13500 포함",
            "filter": f"eq('cpu_score', {cpu_rank['Intel Core i5-13500']})"
        }
    ),
    (
        "AMD Ryzen 5 7600X를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen 5 7600X 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen 5 7600X']})"
        }
    ),
    (
        "Intel Core i5-12600K를 포함하는 PC를 추천해줘",
        {
            "query": "Intel Core i5-12600K 포함",
            "filter": f"eq('cpu_score', {cpu_rank['Intel Core i5-12600K']})"
        }
    ),
    (
        "AMD Ryzen 5 7500F를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen 5 7500F 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen 5 7500F']})"
        }
    ),
    (
        "AMD Ryzen 7 5700X를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen 7 5700X 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen 7 5700X']})"
        }
    ),
    (
        "Intel Core i5-14400를 포함하는 PC를 추천해줘",
        {
            "query": "Intel Core i5-14400 포함",
            "filter": f"eq('cpu_score', {cpu_rank['Intel Core i5-14400']})"
        }
    ),
    (
        "AMD Ryzen 7 5700X3D를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen 7 5700X3D 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen 7 5700X3D']})"
        }
    ),
    (
        "Intel Core i5-13400F를 포함하는 PC를 추천해줘",
        {
            "query": "Intel Core i5-13400F 포함",
            "filter": f"eq('cpu_score', {cpu_rank['Intel Core i5-13400F']})"
        }
    ),
    (
        "AMD Ryzen 5 5600X를 포함하는 PC를 추천해줘",
        {
            "query": "AMD Ryzen 5 5600X 포함",
            "filter": f"eq('cpu_score', {cpu_rank['AMD Ryzen 5 5600X']})"
        }
    ),
    (
        "Intel Core i5-12400F를 포함하는 PC를 추천해줘",
        {
            "query": "Intel Core i5-12400F 포함",
            "filter": f"eq('cpu_score', {cpu_rank['Intel Core i5-12400F']})"
        }
    ),
    (
        "Intel Core i3-12100E를 포함하는 PC를 추천해줘",
        {
            "query": "Intel Core i3-12100E 포함",
            "filter": f"eq('cpu_score', {cpu_rank['Intel Core i3-12100E']})"
        }
    )

]

# 예제를 통한 쿼리 생성자 프롬프트 설정
prompt = get_query_constructor_prompt(
    doc_contents, attribute_info, examples=extended_examples
)
# print(prompt.format(query="{query}"))

chain = load_query_constructor_runnable(
    ChatOpenAI(model="gpt-4o", temperature=0, openai_api_key=OPENAI_KEY),
    doc_contents,
    attribute_info,
    examples=extended_examples,

)
print("쿼리2\n")
# print(chain.invoke({"query": "170만원 견적 추천을 해줘"}))
#
# print(chain.invoke({"query": "그래픽카드 3060이 들어간 피씨를 추천해줘"}))
#
# print(chain.invoke({"query": "롤과 배그가 돌아가는 PC 견적을 추천해줘"}))
#
"""# Using with a self-querying retriever
#
# 이제 우리의 쿼리 구성 체인이 괜찮은 상태에 있다고 판단되므로, 실제 retriever와 함께 사용해 보겠습니다.
# """
#
# import torch
# print(torch.cuda.is_available())  # CUDA 사용 가능한지 여부 출력
# print(torch.cuda.device_count())  # 사용 가능한 GPU 수 출력
# print(torch.cuda.get_device_name(0))  # 첫 번째 GPU의 이름 출력
import os

os.environ["TOKENIZERS_PARALLELISM"] = "false"

from langchain_community.vectorstores import Chroma
from langchain_community.embeddings import HuggingFaceEmbeddings  #

model_name = "jhgan/ko-sroberta-multitask"  # (KorNLU 데이터셋에 학습시킨 한국어 임베딩 모델)
model_kwargs = {'device': 'mps'}
encode_kwargs = {'normalize_embeddings': False}
embeddings = HuggingFaceEmbeddings(
    model_name=model_name,
    model_kwargs=model_kwargs,
    encode_kwargs=encode_kwargs

)

#
"""# Populating vectorstore
#
"""

import json
import pandas as pd
from langchain_core.documents import Document

# 가정: data_df는 이미 적절히 정의되어 있고, 사용할 준비가 되어 있음
docs = []
for _, data in data_df.fillna("").iterrows():
    data_dict = data.to_dict()
    print(data_dict)

    # 특정 키를 제외한 나머지 데이터를 메타데이터로 저장
    keys_to_exclude = {"parts_price"}
    aspect_exclude_data_dict = {k: v for k, v in data_dict.items() if k not in keys_to_exclude}

    # Document 객체 생성
    doc = Document(
        page_content=json.dumps(data_dict, indent=2, ensure_ascii=False),
        metadata=aspect_exclude_data_dict
    )
    docs.append(doc)

print(len(docs))

vecstore = Chroma.from_documents(docs, embeddings, persist_directory="vectorstore_db_final")
print("임베딩 완료")

db3 = Chroma(persist_directory="vectorstore_db1", embedding_function=embeddings)

from langchain.retrievers import SelfQueryRetriever

retriever = SelfQueryRetriever(
    query_constructor=chain, vectorstore=db3, verbose=True, k=4
)

results = retriever.get_relevant_documents(
    "고성능 컴퓨터 견적 추천해줘"
)

for res in results:
    result_dict = json.loads(res.page_content)
    print(result_dict['quote_title'])
print('-----------------------------------------------------------------------------')

for res in results:
    print(res.page_content)
    print("\n" + "-" * 20 + "\n")

results = retriever.get_relevant_documents(
    "그래픽카드 3060이상이고 cpu는 i7-11세대이상이 들어갔으면 좋겠어 조건을 충족하는 pc 피씨를 추천해줘"
)

for res in results:
    result_dict = json.loads(res.page_content)
    print(result_dict['quote_title'])
print('-----------------------------------------------------------------------------')

for res in results:
    print(res.page_content)
    print("\n" + "-" * 20 + "\n")

results = retriever.get_relevant_documents(
    "100만원정도의 저성능 컴퓨터 견적을 추천해줘"
)

for res in results:
    result_dict = json.loads(res.page_content)
    print(result_dict['quote_title'])
print('-----------------------------------------------------------------------------')

for res in results:
    print(res.page_content)
    print("\n" + "-" * 20 + "\n")

results = retriever.get_relevant_documents(
    "롤,배그가 돌아가는 가성비 견적을 추천해줘."
)

for res in results:
    result_dict = json.loads(res.page_content)
    print(result_dict['quote_title'])
print('-----------------------------------------------------------------------------')

for res in results:
    print(res.page_content)
    print("\n" + "-" * 20 + "\n")

results = retriever.get_relevant_documents(
    "GeForce RTX 3050 6GB가 들어간 견적을 추천해줘."
)

for res in results:
    result_dict = json.loads(res.page_content)
    print(result_dict['quote_title'])
print('-----------------------------------------------------------------------------')

for res in results:
    print(res.page_content)
    print("\n" + "-" * 20 + "\n")

results = retriever.get_relevant_documents(
    "그래픽카드 3060 이하이고 cpu는 i5-12세대 이하가 들어갔으면 좋겠어 조건을 충족하는 pc 피씨를 추천해줘"
)

for res in results:
    result_dict = json.loads(res.page_content)
    print(result_dict['quote_title'])
print('-----------------------------------------------------------------------------')
# results = retriever.get_relevant_documents(
#     "넷플릭스나 사진편집용으로 추천해줘"
# )
#
# for res in results:
#     result_dict = json.loads(res.page_content)
#     print(result_dict['quote_title'])
# print('-----------------------------------------------------------------------------')
#
# for res in results:
#     print(res.page_content)
#     print("\n" + "-" * 20 + "\n")
#
# results = retriever.get_relevant_documents(
#     "70만원정도의 PC 견적을 추천해줘."
# )
#
# for res in results:
#     result_dict = json.loads(res.page_content)
#     print(result_dict['quote_title'])
# print('-----------------------------------------------------------------------------')
#
# for res in results:
#     print(res.page_content)
#     print("\n" + "-" * 20 + "\n")
#
# import openai
# import json
# from langchain.vecstores import Chroma  # vecstores에서 Chroma를 사용한다고 가정
#
# # OpenAI 라이브러리 설정
# openai.api_key = '
#
# # 문서 임베딩 및 저장
# def create_embeddings_and_store(documents):
#     embeddings = []
#     for doc in documents:
#         response = openai.Embedding.create(
#             input=doc.page_content,
#             model="text-embedding-ada-002"
#         )
#         embeddings.append(response['data'])
#
#     # FAISS를 사용하여 임베딩 저장 - 이 부분은 FAISS와 관련된 코드 구현에 따라 달라집니다.
#     vecstore = Chroma(embeddings)  # vecstore에 임베딩 저장
#     return vecstore
#
# from langchain.retrievers import SelfQueryRetriever
# from langchain.chains.query_constructor.base import AttributeInfo
# from langchain.retrievers.self_query.base import SelfQueryRetriever
# from langchain.chat_models import ChatOpenAI
#
#
# # retriever = SelfQueryRetriever(
# #     query_constructor=chain, vectorstore=vecstore, verbose=True
# # )
# document_content_description= "Computer Estimate Data"
# llm = ChatOpenAI(temperature=0, openai_api_key = "")
# retriever = SelfQueryRetriever.from_llm(
#     llm,
#     vecstore,
#     document_content_description,
#     attribute_info,
#     verbose = True
# )
# # 사용자의 질문에 대한 응답을 가져오기
# query = "게임 하기 좋은 컴퓨터 견적을 추천해줘"
# response = retriever.get_relevant_documents(query)
#
# # 결과 출력
# for result in response:
#     print(result.page_content)  # 각 문
#
# from langchain.retrievers import SelfQueryRetriever
# from langchain.chains.query_constructor.base import AttributeInfo
# from langchain.retrievers.self_query.base import SelfQueryRetriever
# from langchain.chat_models import ChatOpenAI
# # retriever = SelfQueryRetriever(
# #     query_constructor=chain, vectorstore=vecstore, verbose=True
# # )
# document_content_description= "Computer Estimate Data"
# llm = ChatOpenAI(temperature=0, openai_api_key = "")
# retriever = SelfQueryRetriever.from_llm(
#     llm,
#     vecstore,
#     document_content_description,
#     attribute_info,
#     verbose = True
# )
#
# result = retriever.get_relevant_documents("고성능 컴퓨터 견적을 추천해줘")
#
# retriever
#
# results = retriever.get_relevant_documents(
#     "170만원 컴퓨터 견적을 추천해줘"
# )
#
# for res in results:
#     result_dict = json.loads(res.page_content)
#     print(result_dict['quote_title'])
# print('-----------------------------------------------------------------------------')
#
# for res in results:
#     print(res.page_content)
#     print("\n" + "-" * 20 + "\n")
#
# # 데이터의 가격 정보를 확인
# print(data_df['total_price'].describe())
#
# # 필터 조건을 만족하는 데이터가 있는지 확인
# print(data_df[data_df['total_price'] <= 1100000])
#
# # 필요한 경우, 검색 로직을 조정
# def adjust_search_parameters():
#     new_filter = 'lte("total_price", 1600000)'  # 예산 범위를 조금 더 넓혀서 테스트
#     results = retriever.invoke({"query": test_query, "filter": new_filter})
#     return results
#
# # 조정된 검색 파라미터로 다시 시도
# adjusted_results = adjust_search_parameters()
# if adjusted_results:
#     for res in adjusted_results:
#         print(res)
# else:
#     print("No results found even with adjusted parameters.")
#
# print(data_df['Performance'].unique())  # Unique values in the 'Performance' column
# print(data_df[data_df['Performance'] == "고성능"])  # Rows where Performance is '고성능'
#
# # 고성능 데이터만 필터링
# high_perf_data = data_df[data_df['Performance'] == "고성능"]
# print(high_perf_data)
#
# # 검색 로직 디버깅
# def debug_search(query):
#     print("Running query:", query)
#     results = retriever.invoke(query)
#     if results:
#         for res in results:
#             result_dict = json.loads(res.page_content)
#             print("Found result:", result_dict['quote_title'])
#     else:
#         print("No results found.")
#
# # 쿼리 실행
# test_query = {
#     "query": "170만원짜리 컴퓨터 견적",
# }
# debug_search(test_query)
#
# # 쿼리 생성
# query = "롤할 정도의 컴퓨터 견적을 추천해줘"
# structured_query = {
#     "query": query,
#     "filter": 'contain("quote_description", "롤")'
# }
#
# # 검색 실행
# results = retriever.invoke(structured_query)
#
# if results:
#     for res in results:
#         # 결과가 튜플로 반환되고 첫 번째 요소가 문서 객체인 경우
#         result_dict = json.loads(res[0].page_content)  # 인덱스 0을 사용하여 접근
#         print(result_dict['quote_title'])
#     print('-----------------------------------------------------------------------------')
#
#     for res in results:
#         print(res[0].page_content)  # 결과 출력을 위해 첫 번째 요소 접근
#         print("\n" + "-" * 20 + "\n")
# else:
#     print("No results found.")
#
